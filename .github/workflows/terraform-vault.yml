name: TFE Run with Vault Terraform Secrets Engine Setup

on:
  push:
    branches:
      - master

permissions:
  id-token: write
  contents: read

jobs:
  tfe-run:
    runs-on: ubuntu-latest
    services:
      vault:
        image: hashicorp/vault:1.11.0
        ports:
          - 8200:8200
        # Run Vault in dev mode with a known root token
        options: >-
          --cap-add=IPC_LOCK
        env:
          VAULT_DEV_ROOT_TOKEN_ID: myroot
        command: "server -dev -dev-root-token-id=myroot"
    env:
      # Vault configuration (using the dev server)
      VAULT_ADDR: http://localhost:8200
      # Terraform Enterprise configuration
      TFE_URL: "https://app.terraform.io"
      TFE_WORKSPACE: "ws-G53XWqmDtAm9Pihb"   # Replace with your actual workspace ID
      TFE_ORG: "self_hkr"
      # A management token for TFE used by Vault to generate ephemeral tokens.
      # This is pre-generated from TFE (via UI or API) with sufficient privileges.
      MANAGEMENT_TOKEN: ${{ secrets.T_TOKEN }}
      # Specify which team’s token you want. For example: "team1" or "team2"
      TEAM: "team1"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install jq and Vault CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
          # Install Vault CLI if not already installed
          if ! command -v vault &> /dev/null; then
            wget https://releases.hashicorp.com/vault/1.11.0/vault_1.11.0_linux_amd64.zip
            unzip vault_1.11.0_linux_amd64.zip
            sudo mv vault /usr/local/bin/
          fi
          vault --version

      - name: Wait for Vault to be Ready
        run: |
          for i in {1..10}; do
            if vault status > /dev/null 2>&1; then
              echo "Vault is ready"
              exit 0
            fi
            echo "Waiting for Vault to start..."
            sleep 2
          done
          echo "Vault did not start in time"
          exit 1

      - name: Setup Vault Terraform Secrets Engine
        run: |
          # Use the dev root token (myroot) provided by the container
          export VAULT_ADDR=${VAULT_ADDR}
          export VAULT_TOKEN=myroot

          # Enable the Terraform secrets engine (if not already enabled)
          if ! vault secrets list | grep -q "^terraform/"; then
            vault secrets enable terraform
          fi

          # Configure the TFE host for the secrets engine using the management token.
          # This tells Vault which TFE instance to target when generating tokens.
          vault write terraform/config/host url="${TFE_URL}" token="${MANAGEMENT_TOKEN}"

          # Create roles for each team. In this example, we create two roles.
          vault write terraform/roles/team1 ttl="1h" token_policies="default" description="Team1 ephemeral token"
          vault write terraform/roles/team2 ttl="1h" token_policies="default" description="Team2 ephemeral token"

          echo "Vault Terraform secrets engine has been configured."

      - name: Retrieve Ephemeral TFE Token for Team
        id: get-token
        run: |
          export VAULT_ADDR=${VAULT_ADDR}
          export VAULT_TOKEN=myroot
          TEAM=${TEAM}  # e.g., "team1" or "team2"
          echo "Retrieving ephemeral TFE token for team: ${TEAM}"
          # Vault’s Terraform secrets engine generates a token on demand under the creds endpoint.
          output=$(vault read -format=json terraform/creds/${TEAM})
          echo "$output" | jq .
          TFE_API_TOKEN=$(echo "$output" | jq -r '.data.token')
          if [ -z "$TFE_API_TOKEN" ] || [ "$TFE_API_TOKEN" = "null" ]; then
            echo "Failed to retrieve TFE API token from Vault for team ${TEAM}"
            exit 1
          fi
          echo "TFE_API_TOKEN=$TFE_API_TOKEN" >> $GITHUB_ENV
          echo "::set-output name=tfe_token::$TFE_API_TOKEN"
          echo "Ephemeral TFE token retrieved successfully."

      - name: Trigger TFE Run (Simulated)
        id: trigger-run
        run: |
          echo "Using ephemeral TFE token: ${TFE_API_TOKEN}"
          # Construct a sample payload for triggering a TFE run.
          payload=$(cat <<EOF
          {
            "data": {
              "attributes": {
                "is-destroy": false,
                "message": "Triggered from GitHub Actions with ephemeral token for team ${TEAM}"
              },
              "type": "runs",
              "relationships": {
                "workspace": {
                  "data": {
                    "type": "workspaces",
                    "id": "${TFE_WORKSPACE}"
                  }
                }
              }
            }
          }
EOF
          )
          echo "Payload: $payload"
          # For demonstration purposes, we simulate the API call.
          # In a real setup, you would call the TFE API like this:
          # response=$(curl -s -X POST "${TFE_URL}/api/v2/runs" \
          #   -H "Authorization: Bearer ${TFE_API_TOKEN}" \
          #   -H "Content-Type: application/vnd.api+json" \
          #   -d "${payload}")
          # echo "Response: $response"
          echo "Simulated TFE run triggered with ephemeral token."

      - name: Poll TFE Run Status (Simulated)
        run: |
          echo "Polling TFE run status simulation..."
          # In a real scenario, you would poll the TFE API for the run status.
          sleep 5
          echo "Simulated run status: applied"
