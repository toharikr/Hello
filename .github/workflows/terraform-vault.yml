name: Vault & Terraform Secrets Engine Demo

on:
  push:
    branches:
      - master

jobs:
  vault-setup:
    runs-on: ubuntu-latest
    env:
      # For this demo, Vault runs locally in dev mode.
      VAULT_ADDR: "http://127.0.0.1:8200"
      VAULT_TOKEN: "root"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Vault CLI
        run: |
          echo "Downloading Vault CLI..."
          wget https://releases.hashicorp.com/vault/1.11.0/vault_1.11.0_linux_amd64.zip
          unzip vault_1.11.0_linux_amd64.zip
          sudo mv vault /usr/local/bin/
          vault --version

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Start Vault Server in Dev Mode
        run: |
          # Start Vault in dev mode in the background.
          nohup vault server -dev -dev-root-token-id="root" > vault.log 2>&1 &
          # Allow Vault a few seconds to start up.
          sleep 5
          vault status

      - name: Enable KV Secrets Engine (Keystore)
        run: |
          # Enable the KV secrets engine at the default path "secret/" if not already enabled.
          vault secrets enable -path=secret kv || echo "KV engine already enabled"
          # Write a sample team configuration for Team A.
          vault kv put secret/team-a config="Team A configuration data"
          vault kv get secret/team-a

      - name: Enable Terraform Secrets Engine
        run: |
          # Enable the Terraform secrets engine at the path "terraform/".
          vault secrets enable terraform || echo "Terraform secrets engine already enabled"
          vault secrets list

      - name: Configure Role for Team A in Terraform Secrets Engine
        run: |
          # This writes a role configuration under the Terraform secrets engine for Team A.
          # Adjust parameters (such as token_policies, token_ttl, etc.) as required.
          vault write terraform/roles/team-a \
            token_policies="team-a-policy" \
            token_ttl=3600 \
            token_max_ttl=7200 \
            description="Ephemeral TFE token for Team A"
          vault read terraform/roles/team-a

      - name: Read Ephemeral TFE Token for Team A from Vault
        id: read-token
        run: |
          # Read a dynamically generated token for Team A.
          # Vault will generate a new ephemeral token based on the role configuration.
          vault_output=$(vault read -format=json terraform/creds/team-a)
          echo "$vault_output" | jq .
          TEAM_A_TOKEN=$(echo "$vault_output" | jq -r '.data.token')
          if [ -z "$TEAM_A_TOKEN" ] || [ "$TEAM_A_TOKEN" = "null" ]; then
            echo "Failed to retrieve token for Team A"
            exit 1
          fi
          echo "Team A Ephemeral Token: $TEAM_A_TOKEN"
          # Set the output so subsequent steps can use it.
          echo "::set-output name=team_a_token::$TEAM_A_TOKEN"

      - name: Simulate Using the Ephemeral Token (e.g., Trigger TFE Run)
        run: |
          # Retrieve the token from the previous step.
          TEAM_A_TOKEN="${{ steps.read-token.outputs.team_a_token }}"
          echo "Using the ephemeral token for Team A: $TEAM_A_TOKEN"
          # Here you would use the token for authenticating with Terraform Enterprise's API.
          # For demonstration, we just output the token.
